{"version":3,"file":"static/js/952.825a9acc.chunk.js","mappings":"6QASe,SAASA,IACtB,IAAAC,GAAkCC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,MAAM,IAA7DC,EAAUJ,EAAVI,WAAYC,EAASL,EAATK,UAEpBC,GAAiEC,EAAAA,EAAAA,MAAnDC,EAAaF,EAAnBG,KAAiCC,EAAmBJ,EAA/BK,WAC7BC,GAAoCC,EAAAA,EAAAA,UAAS,wBAAuBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7DI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAEhCI,GAKIC,EAAAA,EAAAA,IAAwBH,GAJpBI,EAASF,EAAfT,KACYY,EAAqBH,EAAjCP,WACOW,EAAUJ,EAAjBK,MACWC,EAAYN,EAAvBO,UAGF,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2DAA0DC,SAAA,EACvEC,EAAAA,EAAAA,KAACC,EAAAA,GAAW,CACVtB,cAAeA,EACfQ,WAAYA,EACZC,cAAeA,EACfN,WAAYD,KAEdmB,EAAAA,EAAAA,KAACE,EAAAA,GAAU,CACTC,UAAQ,EACRC,gBAAiB,IACjBC,iBAAkB,IAClBC,aAAc,GACdC,UAAW,IACXC,oBAAqB,SAAAC,GAAA,IAAGC,EAAKD,EAALC,MAAUC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAAA,OACrCb,EAAAA,EAAAA,KAAA,OAAAc,EAAAA,EAAAA,GAAA,CACEhB,UAAU,uFACVY,OAAKI,EAAAA,EAAAA,GAAA,GAAOJ,IACRC,GACJ,EACFZ,UAEFC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wEAAuEC,SAC1E,OAATR,QAAS,IAATA,OAAS,EAATA,EAAWwB,OAAOC,KAAI,SAACC,EAAMC,GAAC,OAC7BlB,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAEPD,EAAGA,EACHD,KAAMA,EACNrC,KAAMW,EACNf,UAAWA,EACXD,WAAYA,EACZO,WAAYU,EACZC,WAAYA,EACZE,aAAcA,GARTsB,EAAKG,IASV,UAMd,C","sources":["pages/Discover.jsx"],"sourcesContent":["// react\r\nimport { useState } from \"react\";\r\nimport { Scrollbars } from \"react-custom-scrollbars-2\";\r\n// components\r\nimport { SongCard, SelectGenre } from \"../components\";\r\n// redux\r\nimport { useSelector } from \"react-redux\";\r\nimport { useGetSongListQuery, useGetSongsByGenreQuery } from \"../redux/services/shazam\";\r\n\r\nexport default function Discover() {\r\n  const { activeSong, isPlaying } = useSelector((state) => state.player);\r\n\r\n  const { data: dataListGenre, isFetching: isFetchingListQuery } = useGetSongListQuery();\r\n  const [genreTitle, setGenreTitle] = useState(\"genre-global-chart-1\");\r\n\r\n  const {\r\n    data: dataGenre,\r\n    isFetching: isFetchingSongByGenre,\r\n    error: errorGenre,\r\n    isLoading: loadingGenre,\r\n  } = useGetSongsByGenreQuery(genreTitle);\r\n\r\n  return (\r\n    <div className=\"h-full w-full bg-light_bg_Main py-3 dark:bg-dark_bg_Main\">\r\n      <SelectGenre\r\n        dataListGenre={dataListGenre}\r\n        genreTitle={genreTitle}\r\n        setGenreTitle={setGenreTitle}\r\n        isFetching={isFetchingListQuery}\r\n      />\r\n      <Scrollbars\r\n        autoHide\r\n        autoHideTimeout={3000}\r\n        autoHideDuration={500}\r\n        thumbMinSize={10}\r\n        thumbSize={150}\r\n        renderThumbVertical={({ style, ...props }) => (\r\n          <div\r\n            className=\"rounded-md bg-indigo-500 hover:bg-indigo-600 dark:bg-gray-400 dark:hover:bg-gray-500\"\r\n            style={{ ...style }}\r\n            {...props}\r\n          />\r\n        )}\r\n      >\r\n        <div className=\"grid grid-cols-2 place-items-center gap-4 p-2 md:grid-cols-3 md:gap-8\">\r\n          {dataGenre?.tracks.map((song, i) => (\r\n            <SongCard\r\n              key={song.key}\r\n              i={i}\r\n              song={song}\r\n              data={dataGenre}\r\n              isPlaying={isPlaying}\r\n              activeSong={activeSong}\r\n              isFetching={isFetchingSongByGenre}\r\n              errorGenre={errorGenre}\r\n              loadingGenre={loadingGenre}\r\n            />\r\n          ))}\r\n        </div>\r\n      </Scrollbars>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Discover","_useSelector","useSelector","state","player","activeSong","isPlaying","_useGetSongListQuery","useGetSongListQuery","dataListGenre","data","isFetchingListQuery","isFetching","_useState","useState","_useState2","_slicedToArray","genreTitle","setGenreTitle","_useGetSongsByGenreQu","useGetSongsByGenreQuery","dataGenre","isFetchingSongByGenre","errorGenre","error","loadingGenre","isLoading","_jsxs","className","children","_jsx","SelectGenre","Scrollbars","autoHide","autoHideTimeout","autoHideDuration","thumbMinSize","thumbSize","renderThumbVertical","_ref","style","props","_objectWithoutProperties","_excluded","_objectSpread","tracks","map","song","i","SongCard","key"],"sourceRoot":""}